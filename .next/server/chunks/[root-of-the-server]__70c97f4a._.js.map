{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 170, "column": 0}, "map": {"version":3,"sources":["file:///Users/jamesdaniels/Desktop/flowtracshopifyinvv2/services/flowtrac.ts"],"sourcesContent":["import axios from 'axios';\nimport qs from 'qs';\nimport fs from 'fs';\nimport path from 'path';\nimport type { MappingFile } from '@/types/mapping';\n\nconst FLOWTRAC_API_URL = process.env.FLOWTRAC_API_URL;\nconst FLOWTRAC_BADGE = process.env.FLOWTRAC_BADGE;\nconst FLOWTRAC_PIN = process.env.FLOWTRAC_PIN;\n\nconst mappingPath = path.join(process.cwd(), 'mapping.json');\n\nasync function getFlowtracAuthCookie() {\n  const loginRes = await axios.post(\n    `${FLOWTRAC_API_URL}/device-login/`,\n    qs.stringify({ badge: FLOWTRAC_BADGE, pin: FLOWTRAC_PIN }),\n    { headers: { 'Content-Type': 'application/x-www-form-urlencoded' }, withCredentials: true }\n  );\n  const cookies = loginRes.headers['set-cookie'];\n  if (!cookies) throw new Error('No session cookie from Flowtrac login');\n  const flowAuthCookie = cookies.find((c: string) => c.startsWith('flow_auth='));\n  if (!flowAuthCookie) throw new Error('No flow_auth cookie from Flowtrac login');\n  return flowAuthCookie;\n}\n\nasync function fetchAllFlowtracProducts(flowAuthCookie: string) {\n  const productsRes = await axios.get(`${FLOWTRAC_API_URL}/products`, {\n    headers: { Cookie: flowAuthCookie },\n    withCredentials: true,\n  });\n  return productsRes.data;\n}\n\nfunction getProductIdForSku(sku: string, mapping: any): string | undefined {\n  for (const product of mapping.products) {\n    if (product.flowtrac_sku === sku && product.flowtrac_product_id) return product.flowtrac_product_id;\n    if (product.bundle_components) {\n      for (const comp of product.bundle_components) {\n        if (comp.flowtrac_sku === sku && comp.flowtrac_product_id) return comp.flowtrac_product_id;\n      }\n    }\n  }\n  return undefined;\n}\n\nfunction setProductIdForSku(sku: string, product_id: string, mapping: any): boolean {\n  let updated = false;\n  for (const product of mapping.products) {\n    if (product.flowtrac_sku === sku) {\n      if (product.flowtrac_product_id !== product_id) {\n        product.flowtrac_product_id = product_id;\n        updated = true;\n      }\n    }\n    if (product.bundle_components) {\n      for (const comp of product.bundle_components) {\n        if (comp.flowtrac_sku === sku) {\n          if (comp.flowtrac_product_id !== product_id) {\n            comp.flowtrac_product_id = product_id;\n            updated = true;\n          }\n        }\n      }\n    }\n  }\n  return updated;\n}\n\nexport async function fetchFlowtracInventory(skus: string[]): Promise<Record<string, number>> {\n  // 1. Authenticate to get session cookie\n  const flowAuthCookie = await getFlowtracAuthCookie();\n\n  // 2. Load mapping.json\n  const mapping: MappingFile = JSON.parse(fs.readFileSync(mappingPath, 'utf-8'));\n\n  // 3. Fetch all Flowtrac products once (for self-healing)\n  const products = await fetchAllFlowtracProducts(flowAuthCookie);\n  const skuToProductId: Record<string, string> = {};\n  for (const p of products) {\n    if (p.product) skuToProductId[p.product] = p.product_id;\n    if (p.barcode) skuToProductId[p.barcode] = p.product_id;\n  }\n\n  let mappingUpdated = false;\n  // 4. Ensure all SKUs have product_id, self-heal if missing\n  const skuToPidForQuery: Record<string, string> = {};\n  for (const sku of skus) {\n    let pid = getProductIdForSku(sku, mapping);\n    if (!pid) {\n      pid = skuToProductId[sku];\n      if (pid) {\n        if (setProductIdForSku(sku, pid, mapping)) mappingUpdated = true;\n      } else {\n        throw new Error(`SKU '${sku}' not found in Flowtrac products.`);\n      }\n    }\n    skuToPidForQuery[sku] = pid;\n  }\n  if (mappingUpdated) {\n    fs.writeFileSync(mappingPath, JSON.stringify(mapping, null, 2));\n    console.log('mapping.json updated with missing Flowtrac product_ids during sync.');\n  }\n\n  // 5. Query Flowtrac using product_id for each SKU\n  const inventory: Record<string, number> = {};\n  const today = new Date();\n  for (const [sku, product_id] of Object.entries(skuToPidForQuery)) {\n    // Query all bins for the product_id\n    const params = { product_id };\n    const binsRes = await axios.get(`${FLOWTRAC_API_URL}/product-warehouse-bins`, {\n      headers: { Cookie: flowAuthCookie },\n      params,\n      withCredentials: true,\n    });\n    const bins = binsRes.data;\n    // Sum 'quantity' where include_in_available is 'Yes', warehouse is 'Manteca', and not expired\n    inventory[sku] = bins\n      .filter((b: any) => {\n        if (b.include_in_available !== 'Yes') return false;\n        if (b.warehouse !== 'Manteca') return false;\n        if (b.expiration_date) {\n          const exp = new Date(b.expiration_date);\n          if (exp < today) return false;\n        }\n        return true;\n      })\n      .reduce((sum: number, b: any) => sum + (Number(b.quantity) || 0), 0);\n  }\n  return inventory;\n}\n\n/**\n * Filters Flowtrac products to only those that are mapped for syncing (by SKU), and optionally active.\n * @param flowtracProducts Array of Flowtrac product objects\n * @param onlyActive If true, only include products with active === 'Active'\n */\nexport function filterProductsToSync(flowtracProducts: any[], onlyActive = true): any[] {\n  // Load mapping.json (assume project root)\n  const mappingPath = path.resolve(__dirname, '../../../mapping.json');\n  const mapping: MappingFile = JSON.parse(fs.readFileSync(mappingPath, 'utf-8'));\n\n  // Collect all mapped SKUs from simple and bundle products\n  const mappedSkus = new Set<string>();\n  for (const product of mapping.products) {\n    if ('flowtrac_sku' in product && product.flowtrac_sku) {\n      mappedSkus.add(product.flowtrac_sku);\n    }\n    if ('bundle_components' in product && Array.isArray(product.bundle_components)) {\n      for (const comp of product.bundle_components) {\n        if (comp.flowtrac_sku) mappedSkus.add(comp.flowtrac_sku);\n      }\n    }\n  }\n\n  // Filter Flowtrac products by SKU and (optionally) active status\n  return flowtracProducts.filter(p =>\n    mappedSkus.has(p.product) && (!onlyActive || p.active === 'Active')\n  );\n}\n\n// Test function to verify Flowtrac API connectivity using /device-login/\nexport async function testFlowtracConnection(): Promise<any> {\n  try {\n    // 1. Login to get session cookie\n    const loginRes = await axios.post(\n      `${FLOWTRAC_API_URL}/device-login/`,\n      qs.stringify({ badge: FLOWTRAC_BADGE, pin: FLOWTRAC_PIN }),\n      {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        withCredentials: true,\n      }\n    );\n    // Log the full response for troubleshooting\n    console.log('Flowtrac loginRes.headers:', loginRes.headers);\n    console.log('Flowtrac loginRes.data:', loginRes.data);\n    const cookies = loginRes.headers['set-cookie'];\n    if (!cookies || !cookies.length) {\n      return { error: 'No session cookie returned from device-login.', headers: loginRes.headers, data: loginRes.data };\n    }\n    const flowAuthCookie = cookies.find((c: string) => c.startsWith('flow_auth='));\n    if (!flowAuthCookie) {\n      return { error: 'No flow_auth session cookie found.', headers: loginRes.headers, data: loginRes.data };\n    }\n    // 2. Use flow_auth cookie to fetch products (no limit param)\n    try {\n      const productsRes = await axios.get(`${FLOWTRAC_API_URL}/products`, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Cookie': flowAuthCookie.split(';')[0],\n        },\n      });\n      return productsRes.data;\n    } catch (productsError: any) {\n      // Log the full error response\n      console.log('Flowtrac productsError.response?.data:', productsError.response?.data);\n      console.log('Flowtrac productsError.response?.headers:', productsError.response?.headers);\n      return {\n        error: productsError.message,\n        data: productsError.response?.data,\n        headers: productsError.response?.headers,\n      };\n    }\n  } catch (error) {\n    return { error: (error as Error).message };\n  }\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 384, "column": 0}, "map": {"version":3,"sources":["file:///Users/jamesdaniels/Desktop/flowtracshopifyinvv2/services/shopify.ts"],"sourcesContent":["import axios from 'axios';\nimport fs from 'fs';\nimport path from 'path';\n\nconst SHOPIFY_API_KEY = process.env.SHOPIFY_API_KEY;\nconst SHOPIFY_API_PASSWORD = process.env.SHOPIFY_API_PASSWORD;\nconst SHOPIFY_STORE_URL = process.env.SHOPIFY_STORE_URL;\nconst SHOPIFY_API_VERSION = process.env.SHOPIFY_API_VERSION || '2023-10';\n\nconst mappingPath = path.join(process.cwd(), 'mapping.json');\n\nconst shopifyGraphqlUrl = `https://${SHOPIFY_STORE_URL}/admin/api/${SHOPIFY_API_VERSION}/graphql.json`;\n\nasync function getVariantAndInventoryItemIdBySku(sku: string): Promise<{ variantId: string | null, inventoryItemId: string | null }> {\n  const query = `\n    query GetVariantAndInventoryBySku($sku: String!) {\n      products(first: 1, query: $sku) {\n        edges {\n          node {\n            variants(first: 10) {\n              edges {\n                node {\n                  id\n                  sku\n                  inventoryItem {\n                    id\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n  const variables = { sku };\n  const response = await axios.post(\n    shopifyGraphqlUrl,\n    { query, variables },\n    {\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Shopify-Access-Token': SHOPIFY_API_PASSWORD,\n      },\n    }\n  );\n  const products = response.data.data.products.edges;\n  for (const productEdge of products) {\n    for (const variantEdge of productEdge.node.variants.edges) {\n      if (variantEdge.node.sku === sku) {\n        return {\n          variantId: variantEdge.node.id,\n          inventoryItemId: variantEdge.node.inventoryItem.id,\n        };\n      }\n    }\n  }\n  return { variantId: null, inventoryItemId: null };\n}\n\nlet mantecaLocationId: string | null = null;\n\nexport async function getMantecaLocationId(): Promise<string> {\n  if (mantecaLocationId) return mantecaLocationId;\n  const url = `https://${SHOPIFY_STORE_URL}/admin/api/${SHOPIFY_API_VERSION}/locations.json`;\n  const response = await axios.get(url, {\n    headers: {\n      'Content-Type': 'application/json',\n      'X-Shopify-Access-Token': SHOPIFY_API_PASSWORD,\n    },\n  });\n  const locations = response.data.locations;\n  const manteca = locations.find((loc: any) => loc.name.toLowerCase() === 'manteca');\n  if (!manteca) throw new Error('Manteca location not found in Shopify locations');\n  mantecaLocationId = manteca.id.toString();\n  return mantecaLocationId!;\n}\n\nfunction extractIdFromGid(gid: string): string {\n  // e.g., gid://shopify/InventoryItem/53137749803317 -> 53137749803317\n  return gid.split('/').pop() || gid;\n}\n\nexport async function updateShopifyInventory(inventoryItemId: string, available: number): Promise<void> {\n  if (!inventoryItemId) throw new Error('inventoryItemId is required for updateShopifyInventory');\n  const locationId = await getMantecaLocationId();\n  const url = `https://${SHOPIFY_STORE_URL}/admin/api/${SHOPIFY_API_VERSION}/inventory_levels/set.json`;\n  const payload = {\n    location_id: locationId,\n    inventory_item_id: extractIdFromGid(inventoryItemId),\n    available,\n  };\n  const headers = {\n    'Content-Type': 'application/json',\n    'X-Shopify-Access-Token': SHOPIFY_API_PASSWORD,\n  };\n  console.log('[Shopify Debug] Inventory Update URL:', url);\n  console.log('[Shopify Debug] Payload:', JSON.stringify(payload));\n  console.log('[Shopify Debug] Headers:', headers);\n  try {\n    await axios.post(url, payload, { headers });\n  } catch (error: any) {\n    console.error('[Shopify Debug] Error updating inventory:', error.response?.data || error.message);\n    throw error;\n  }\n}\n\nexport async function enrichMappingWithShopifyVariantAndInventoryIds(): Promise<void> {\n  const mapping = JSON.parse(fs.readFileSync(mappingPath, 'utf-8'));\n  let updated = false;\n  for (const product of mapping.products) {\n    if (product.shopify_sku && (!product.shopify_variant_id || !product.shopify_inventory_item_id)) {\n      const { variantId, inventoryItemId } = await getVariantAndInventoryItemIdBySku(product.shopify_sku);\n      if (variantId) {\n        product.shopify_variant_id = variantId;\n        updated = true;\n      }\n      if (inventoryItemId) {\n        product.shopify_inventory_item_id = inventoryItemId;\n        updated = true;\n      }\n    }\n    if (Array.isArray(product.bundle_components)) {\n      // Bundles themselves should have shopify_sku and IDs at the top level\n      continue;\n    }\n  }\n  if (updated) {\n    fs.writeFileSync(mappingPath, JSON.stringify(mapping, null, 2));\n    console.log('mapping.json updated with Shopify variant and inventory item IDs.');\n  }\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 524, "column": 0}, "map": {"version":3,"sources":["file:///Users/jamesdaniels/Desktop/flowtracshopifyinvv2/src/app/api/sync/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n// import { rateLimit } from '../../middleware/rateLimit';\nimport path from 'path';\nimport fs from 'fs';\nimport { fetchFlowtracInventory } from '../../../../services/flowtrac';\nimport { enrichMappingWithShopifyVariantAndInventoryIds, updateShopifyInventory } from '../../../../services/shopify';\n\nexport async function POST(request: NextRequest) {\n  // Rate limiting\n  // const rateLimitResult = rateLimit(request);\n  // if (rateLimitResult) return rateLimitResult;\n\n  console.log('Sync job started');\n\n  try {\n    // 1. Load mapping.json\n    const mappingPath = path.join(process.cwd(), 'mapping.json');\n    console.log('DEBUG: Resolved mappingPath in API route:', mappingPath);\n    let mapping = JSON.parse(fs.readFileSync(mappingPath, 'utf-8'));\n\n    // 2. Collect all SKUs (simple and bundle components)\n    const skus = new Set<string>();\n    for (const product of mapping.products) {\n      if (product.flowtrac_sku) skus.add(product.flowtrac_sku);\n      if (Array.isArray(product.bundle_components)) {\n        for (const comp of product.bundle_components) {\n          if (comp.flowtrac_sku) skus.add(comp.flowtrac_sku);\n        }\n      }\n    }\n\n    // 3. Fetch inventory data from Flowtrac\n    const flowtracInventory = await fetchFlowtracInventory(Array.from(skus));\n    console.log('Fetched Flowtrac inventory', { flowtracInventory });\n\n    // 4. Build shopifyInventory map (simple and bundle SKUs)\n    const shopifyInventory: Record<string, number> = {};\n    for (const product of mapping.products) {\n      if (Array.isArray(product.bundle_components) && product.shopify_sku) {\n        const quantities = product.bundle_components.map((comp: any) => {\n          const available = flowtracInventory[comp.flowtrac_sku] || 0;\n          return Math.floor(available / comp.quantity);\n        });\n        shopifyInventory[product.shopify_sku] = quantities.length > 0 ? Math.min(...quantities) : 0;\n      } else if (product.shopify_sku && product.flowtrac_sku) {\n        shopifyInventory[product.shopify_sku] = flowtracInventory[product.flowtrac_sku] || 0;\n      }\n    }\n\n    // 5. Self-heal: Enrich mapping.json with missing Shopify variant and inventory item IDs\n    await enrichMappingWithShopifyVariantAndInventoryIds();\n    // Reload mapping after enrichment\n    const updatedMapping = JSON.parse(fs.readFileSync(mappingPath, 'utf-8'));\n\n    // 6. Update inventory in Shopify for each SKU\n    const updateResults: Record<string, { success: boolean; error?: string }> = {};\n    for (const [sku, quantity] of Object.entries(shopifyInventory)) {\n      const product = updatedMapping.products.find((p: any) => p.shopify_sku === sku);\n      const inventoryItemId = product?.shopify_inventory_item_id;\n      if (!inventoryItemId) {\n        updateResults[sku] = { success: false, error: 'No shopify_inventory_item_id in mapping.json' };\n        console.error(`No shopify_inventory_item_id for SKU ${sku}`);\n        continue;\n      }\n      try {\n        await updateShopifyInventory(inventoryItemId, quantity);\n        updateResults[sku] = { success: true };\n        console.log(`Updated Shopify inventory for SKU ${sku} (inventory item ${inventoryItemId}) to ${quantity}`);\n      } catch (err: any) {\n        updateResults[sku] = { success: false, error: err.message };\n        console.error(`Failed to update Shopify inventory for SKU ${sku}: ${err.message}`);\n      }\n    }\n\n    console.log('Sync job completed successfully');\n    // 7. Return success response\n    return NextResponse.json({ success: true, message: 'Sync completed.', shopifyInventory, updateResults });\n  } catch (error) {\n    console.error('Sync job failed', { error });\n    // Handle errors\n    return NextResponse.json({ success: false, error: (error as Error).message }, { status: 500 });\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  // Optionally allow GET for testing\n  return NextResponse.json({ message: 'Sync endpoint is up.' });\n} "],"names":[],"mappings":"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","debugId":null}}]
}